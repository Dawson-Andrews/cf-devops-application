- name: Install ACL package
  apt:
    name: acl
    state: present

- name: Install application.
  apt:
    deb: "{{ app_deb_package }}"

- name: Create app user.
  user:
    name: "{{ app_user }}"
    comment: App user
    system: yes

- name: Chown Apps directory
  file:
    dest: "{{ app_directory }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    recurse: yes

- name: Chown npm cache directory
  file:
    path: /var/www/
    state: directory
    recurse: yes
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'

- name: Set custom php ini values
  include_tasks: php.yml

- name: Check if composer.json exists
  stat:
    path: "{{ app_directory }}/composer.json"
  register: run_composer

- name: Validate PHP framework
  include_tasks: validation.yml

- become: true
  become_user: "{{ app_user }}"
  block:
    - name: Composer Install.
      composer:
        command: install
        no_dev: no
        working_dir: "{{ app_directory }}"
      when: run_composer.stat.exists

    #- include_tasks: testing.yml
    #- include_tasks: behat.yml
    - include_tasks: env.yml

    - name: Check if npm package.json exists
      stat:
        path: "{{ app_directory }}/package.json"
      register: run_npm

   # - name: npm install
   #   command: "npm install"
   #   args:
   #     chdir: "{{ app_directory }}"
   #   when: npm_install and run_npm.stat.exists

   # - name: npm run prod
   #   command: "npm run prod"
   #   args:
   #     chdir: "{{ app_directory }}"
   #   when: npm_install and run_npm.stat.exists
   #   when: npm_install and run_npm.stat.exists

    - name: Composer install to remove dev dependecies.
      composer:
        command: install
        working_dir: "{{ app_directory }}"
      when: run_composer.stat.exists

    - name: Cat vendor folder
      command: cat {{ app_directory }}/vendor
      register: vendor_folder_output

    - name: Show vendor output
      debug:
        msg: "{{ vendor_file_output.stdout }}"

    #- name: Craft Security Key Generate.
    #  shell: 'php craft setup/security-key'
    #  args:
    #    chdir: "{{ app_directory }}"
    #  when: fact_craftcms_version | length > 0 and app_env.APP_KEY is not defined

    - name: Artisan Key Generate.
      shell: 'php artisan key:generate'
      args:
        chdir: "{{ app_directory }}"
      when: fact_laravel_version | length > 0 and app_env.APP_KEY is not defined

    - name: Configure laravel cronjob
      cron:
        name: Laravel Cron
        user: "{{ app_user }}"
        job: "cd {{ app_directory }} && php artisan schedule:run >> /dev/null 2>&1"
      when: fact_laravel_version | length > 0